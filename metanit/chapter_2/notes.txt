WebGL primitives:
    1. gl.LINES - set of lines, all lines are drawn separately
    2. gl.LINE_STRIP - set of points connected by lines sequentially
    3. gl.LINE_LOOP - set of points connected by lines sequentially where last point is connected to first point
    4. gl.TRIANGLES - set of triangles
    5. gl.TRIANGLES_STRIP - set of triangles, де вершини послідовно зєднюються в трикутники
    6. gl.TRIANGLES_FAN - set of triangles with the same apex
    7. gl.POINTS - set of basic points which is not connected among themselves

Метод gl.drawArrays(mode, index, count) - відмальовує обєкти послідовно по вершинам в буфері вершин, де
    mode - задає тип примітива
    index - вказує, який номер вершини в буфері вершин буде першим для примітива
    count - кількість вершин, які будуть використовуватися для відмалювання

Метод gl.drawElements(mode, count, type, offset) - працює з буфером індексів, де
    mode - зажає тип примітива
    count - кількість елементів для відмалювання
    type - тип значень в буфері індексів. Може мати значеня UNSIGNED_BYTE або UNSIGNED_SHORT
    offset - зміщення, з якого індексу буде виконуватися відмалювання



Не дивлячись на те, що трикутник це проста фігура на площині, проте всю трьохвимірну фігуру можна уявити як
    набір простих трикутників.
Для кожного трикутника в буфері вершин оприділяється по три вершини. При цьому, якщо нам потрібно відмлювати
    декілька трикутників, тоді вершини одного трикутника не використовуються для другого.

Набір індексів вказує послідовність вершин, з яких складаються чотири лінії. Тобто кожна лінія в нас получається окремо



    Шейдери

Це один із базових елементів будь-якої програми на WebGL. Без них важко щось зробити, завдяки вершинному і фрагментному
    шейдеру, набір вершин перетворюється в набір примітивів, які потім розмальовуються і т.п.

Вершинний шейдер проходиться по всіх переданих вершинах і виконує певні маніпуляції описані розробником. Іменно він
    відповідає за матричне перетворення координат, їх зміщення і т.п. На виході він генерує фінальні координати вершин і
    передає їх далі.

Як і будь-яка програма на С/С++, шейдер має основну процедуру main, в якій відбувається генерація кінцевих координат
    вершин, тільки уже в вигляді чотирьохмірного вектора.

Фрагментний шейдер наповнює набір примітивів кольором, розмальовує їх. Він ніяк не впливає на координати вершини, а
    тільки на кольорову складову, пертворюючи вершини в пікселі або фрагменти.


    GLSL

В GLSL оприділені наступні примітивні типи:
    1. void - функція не повертає ніякого значення
    2. bool - логічне значення true || false
    3. int - цілочисельне значення
    4. float - числове значення з плавачою точкою
    5. vec2, vec3, vec4 - двох, трьох, чотирьохмірні вектори, які містять обєкти типу float
    6. ivec2, ivec3, ivec4 - ... тип int
    7. bvec2, bvec3, bvec4 - ... тип bool
    8. mat2, mat3, mat4 - матриці 2х2 3х3 4х4, які містять обєкти типу float
    9. sampler2D, samplerCube - спеціальні типи - семплери для роботи з текстурами. З їх допомогою в фрагментному шейдері
       ми можемо получити кольорове значення текстури і передати його примітиву

В GLSL для оприділення певної поведінки змінної, використовуються наступні модифікатори (кваліфікатори):
    1. attribute - атрибут або частина опису вершини, яка передається з програми на WebGL в вершинний шейдер
    2. const - оприділяють своє значення лише один раз і в процесі програми його не міняють
    3. uniform - те ж саме що і const, тільки ці значення задаються для всього примітиву
    4. varying - змінна, яка задається в вершинному шейдері, а потім передається в фрагментний шейдер, де може бути
       використана

Кваліфікатори для чисел з плавачою точкою:
    1. highp - максимальна точність
    2. mediump - середня степінь точності
    3. lowp - діапазон від -2 до 2




















